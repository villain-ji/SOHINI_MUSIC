import re
from math import ceil
from typing import Union

from pyrogram import Client, filters, types
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

import config
from config import BANNED_USERS, START_IMG_URL
from strings import get_command, get_string
from ChampuMusic import HELPABLE, app
from ChampuMusic.utils.database import get_lang, is_commanddelete_on
from ChampuMusic.utils.decorators.language import LanguageStart
from ChampuMusic.utils.inline.help import private_help_panel

### Command
HELP_COMMAND = get_command("HELP_COMMAND")

COLUMN_SIZE = 4
NUM_COLUMNS = 3



class EqInlineKeyboardButton(InlineKeyboardButton):
    def __eq__(self, other):
        return self.text == other.text

    def __lt__(self, other):
        return self.text < other.text

    def __gt__(self, other):
        return self.text > other.text


def paginate_modules(page_n, module_dict, prefix, chat=None, close: bool = False):
    if not chat:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{})".format(
                        prefix, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )
    else:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{},{})".format(
                        prefix, chat, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )

    pairs = [modules[i : i + NUM_COLUMNS] for i in range(0, len(modules), NUM_COLUMNS)]

    max_num_pages = ceil(len(pairs) / COLUMN_SIZE) if len(pairs) > 0 else 1
    modulo_page = page_n % max_num_pages

    if len(pairs) > COLUMN_SIZE:
        pairs = pairs[modulo_page * COLUMN_SIZE : COLUMN_SIZE * (modulo_page + 1)] + [
            (
                EqInlineKeyboardButton(
                    "‚ùÆ",
                    callback_data="{}_prev({})".format(
                        prefix,
                        modulo_page - 1 if modulo_page > 0 else max_num_pages - 1,
                    ),
                ),
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
                EqInlineKeyboardButton(
                    "‚ùØ",
                    callback_data="{}_next({})".format(prefix, modulo_page + 1),
                ),
            )
        ]
    else:
        pairs.append(
            [
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
            ]
        )

    return pairs


@app.on_message(filters.command(HELP_COMMAND) & filters.private & ~BANNED_USERS)
@app.on_callback_query(filters.regex("settings_back_helper") & ~BANNED_USERS)
async def helper_private(
    client: app, update: Union[types.Message, types.CallbackQuery]
):
    is_callback = isinstance(update, types.CallbackQuery)
    if is_callback:
        try:
            await update.answer()
        except:
            pass

        chat_id = update.message.chat.id
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await update.edit_message_text(_["help_1"], reply_markup=keyboard)
    else:
        chat_id = update.chat.id
        if await is_commanddelete_on(update.chat.id):
            try:
                await update.delete()
            except:
                pass
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(
            paginate_modules(0, HELPABLE, "help", close=True)
        )
        try:
            if update.chat.photo:
                userss_photo = await app.download_media(
                    update.chat.photo.big_file_id,
                )
            else:
                userss_photo = "assets/nodp.jpg"

            chat_photo = userss_photo if userss_photo else START_IMG_URL
        except AttributeError:
            chat_photo = "assets/nodp.jpg"

        await update.reply_photo(
            photo=chat_photo,
            caption=_["help_1"].format(config.SUPPORT_GROUP),
            reply_markup=keyboard,
        )


@app.on_message(filters.command(HELP_COMMAND) & filters.group & ~BANNED_USERS)
@LanguageStart
async def help_com_group(client, message: Message, _):
    try:
        if message.chat.photo:
            group_photo = await app.download_media(
                message.chat.photo.big_file_id,
            )
        else:
            group_photo = "assets/nodp.png"

        chat_photo = group_photo if group_photo else "assets/nodp.png"
    except AttributeError:
        chat_photo = "assets/nodp.png"

    keyboard = private_help_panel(_)
    await message.reply_photo(
        photo=chat_photo,
        caption=_["help_2"],
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

async def help_parser(name, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    return keyboard


@app.on_callback_query(filters.regex(r"help_(.*?)"))
async def help_button(client, query):
    home_match = re.match(r"help_home\((.+?)\)", query.data)
    mod_match = re.match(r"help_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back\((\d+)\)", query.data)
    create_match = re.match(r"help_create", query.data)
    language = await get_lang(query.message.chat.id)
    _ = get_string(language)
    top_text = _["help_1"]

    if mod_match:
        module = mod_match.group(1)
        prev_page_num = int(mod_match.group(2))
        text = (
            f"<b><u>ùêá·¥á Ä·¥á …™s ·¥õ ú·¥á  ú·¥á ü·¥ò “ì·¥è Ä {HELPABLE[module].__MODULE__}:</u></b>\n"
            + HELPABLE[module].__HELP__
        )

        key = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="‚Ü™ ùêÅ·¥Ä·¥Ñ·¥ã", callback_data=f"help_back({prev_page_num})"
                    ),
                    InlineKeyboardButton(text="üîÑ ùêÇ ü·¥ès·¥á", callback_data="close"),
                ],
            ]
        )

        await query.message.edit(
            text=text,
            reply_markup=key,
            disable_web_page_preview=True,
        )

    elif home_match:
        await app.send_message(
            query.from_user.id,
            text=home_text_pm,
            reply_markup=InlineKeyboardMarkup(out),
        )
        await query.message.delete()

    elif prev_match:
        curr_page = int(prev_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(curr_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif next_match:
        next_page = int(next_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(next_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif back_match:
        prev_page_num = int(back_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(prev_page_num, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif create_match:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await query.message.edit(
            text=top_text,
            reply_markup=keyboard,
            disable_web_page_preview=True,
        )

    await client.answer_callback_query(query.id)


# ===================================

from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from config import BANNED_USERS
from strings import helpers
from ChampuMusic import app
from ChampuMusic.utils.decorators.language import languageCB


@app.on_callback_query(filters.regex("music_callback") & ~BANNED_USERS)
@languageCB
async def music_helper_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_music(_)

    if cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.HELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.HELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.HELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.HELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.HELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.HELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.HELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.HELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.HELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.HELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.HELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.HELP_12, reply_markup=keyboard)

    elif cb == "hb13":

        await CallbackQuery.edit_message_text(helpers.HELP_13, reply_markup=keyboard)

    elif cb == "hb14":

        await CallbackQuery.edit_message_text(helpers.HELP_14, reply_markup=keyboard)

    elif cb == "hb15":

        await CallbackQuery.edit_message_text(helpers.HELP_15, reply_markup=keyboard)


@app.on_callback_query(filters.regex("management_callback") & ~BANNED_USERS)
@languageCB
async def management_callback_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_management(_)

    if cb == "extra":

        await CallbackQuery.edit_message_text(helpers.EXTRA_1, reply_markup=keyboard)

    elif cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.MHELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.MHELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.MHELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.MHELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.MHELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.MHELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.MHELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.MHELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.MHELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.MHELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.MHELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.MHELP_12, reply_markup=keyboard)


@app.on_callback_query(filters.regex("tools_callback") & ~BANNED_USERS)
@languageCB
async def tools_callback_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_tools(_)

    if cb == "ai":

        await CallbackQuery.edit_message_text(helpers.AI_1, reply_markup=keyboard)

    elif cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.THELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.THELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.THELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.THELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.THELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.THELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.THELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.THELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.THELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.THELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.THELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.THELP_12, reply_markup=keyboard)


@app.on_callback_query(filters.regex("developer"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text="ùêí ú·¥ú ô ú·¥è üíó", user_id=config.OWNER_ID[0]),
            InlineKeyboardButton(
                text="ùêí·¥ú·¥Ö·¥è·¥á Äs üëÄ", url=f"https://t.me/{app.username}?start=sudo"
            ),
        ],
        [
            InlineKeyboardButton(text="ùêÇ ú·¥Ä·¥õ üïäÔ∏è", url=f"https://t.me/+3LYCl_fgUBgzZTQ9"),
            InlineKeyboardButton(text="ùêå·¥è·¥†…™·¥ás üçø", url=f"https://t.me/+9-FI_YhCiAhmNmVl"),
        ],
        [
            InlineKeyboardButton(text="‚Ä¢ùêÅ·¥Ä·¥Ñ·¥ã‚Ä¢", callback_data="about")
        ],  # Use a default label for the back button
    ]
    await callback_query.message.edit_text(
        "‚ú¶ **ùêì ú…™s  ô·¥è·¥õ …™s ·¥ç·¥Ä·¥Ö·¥á  ô è ·¥Ä s·¥ã…™ ü ü·¥á·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ·¥õ·¥è ·¥ç·¥Ä·¥ã·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥á·¥Äs è ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥Ä…¥·¥Ö ·¥ç·¥è Ä·¥á “ì·¥ú…¥.**\n\n‚ú¶ **·¥°…™·¥õ ú ·¥ä·¥ús·¥õ ·¥Ä “ì·¥á·¥° ·¥Ñ ü…™·¥Ñ·¥ãs,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥á·¥†·¥á Ä è·¥õ ú…™…¥…¢‚Äî ü…™·¥ã·¥á s·¥á·¥õ·¥õ…™…¥…¢ ·¥ú·¥ò ·¥è·¥°…¥·¥á Ä s·¥á·¥õ·¥õ…™…¥…¢s, ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ s·¥ú·¥Ö·¥è·¥á Äs, ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ ·¥áx·¥ò ü·¥è Ä…™…¥…¢ …™…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç ·¥Ä…¥·¥Ö  è·¥è·¥ú·¥õ·¥ú ô·¥á.**\n\n‚ú¶ **·¥õ ú·¥á  ô·¥è·¥õ …™s ·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥õ·¥è  ú·¥á ü·¥ò  è·¥è·¥ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò s·¥ç·¥è·¥è·¥õ ú ü è ·¥Ä…¥·¥Ö ·¥á…¥·¥ä·¥è è ·¥ç·¥ús…™·¥Ñ ·¥õ·¥è·¥è. ·¥ä·¥ús·¥õ ·¥ús·¥á ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° ·¥Ä…¥·¥Ö s·¥á·¥á  ú·¥è·¥° ·¥á·¥Äs è …™·¥õ …™s!**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@app.on_callback_query(filters.regex("feature"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="ùêì·¥Ä·¥ò  ú·¥á Ä·¥á ·¥õ·¥è s·¥á·¥á ·¥ç·¥Ä…¢…™·¥Ñ üíó",
                url=f"https://t.me/{app.username}?startgroup=true",
            ),
        ],
        [
            InlineKeyboardButton(text="Àπùêå·¥ús…™·¥ÑÀº üéß", callback_data="music"),
            InlineKeyboardButton(text="Àπùêå·¥ß…¥·¥ß…¢·¥ç·¥á…¥·¥õÀº üéÑ", callback_data="management"),
        ],
        [
            InlineKeyboardButton(text="Àπ·¥õ·¥è·¥è üs ‚ô•Ô∏èÀº", callback_data="tools"),
            InlineKeyboardButton(text="Àπ·¥ß ü üÀº üí•", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="ùêá·¥è·¥ç·¥á üëÄ", callback_data="go_to_start")],
    ]
    k = f"""**‚ú® ·¥ç·¥á·¥á·¥õ {app.mention} !\n\n‚Ä¢‚ùÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚ùÖ‚ú¶‚ùÖ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÖ\nüé∂ …™‚Äô·¥ç ·¥Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ | ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ\n\nüöÄ …¥·¥è  ü·¥Ä…¢, …¥·¥è ·¥Ä·¥Ös, …¥·¥è ·¥ò Ä·¥è·¥ç·¥è·¥õ…™·¥è…¥s\nüéß ùü∏ùü∫/ùüΩ ·¥ú·¥ò·¥õ…™·¥ç·¥á ·¥°…™·¥õ ú ·¥õ ú·¥á  ô·¥ás·¥õ s·¥è·¥ú…¥·¥Ö «´·¥ú·¥Ä ü…™·¥õ è\nüí° ·¥õ·¥Ä·¥ò ·¥õ ú·¥á  ú·¥á ü·¥ò  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥áx·¥ò ü·¥è Ä·¥á ·¥ç è ·¥ç·¥è·¥Ö·¥ú ü·¥ás ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös!\n\n‚ùÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚ùÖ‚ú¶‚ùÖ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÖ\n‚ùñ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ‚û• <a href=https://t.me/Chini_tomarre>ìÜ© ùêí ùêá ùêî ùêÅ ùêá ùêé ìÜ™</a></b></blockquote>**"""
    await callback_query.message.edit_text(
        text=k, reply_markup=InlineKeyboardMarkup(keyboard)
    )


@app.on_callback_query(filters.regex("music"))
async def music_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(text="‚Ä¢ùêÄ·¥Ö·¥ç…™…¥‚Ä¢", callback_data="music_callback hb1"),
                InlineKeyboardButton(text="‚Ä¢ùêÄ·¥ú·¥õ ú‚Ä¢", callback_data="music_callback hb2"),
                InlineKeyboardButton(
                    text="‚Ä¢ùêÅ Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ‚Ä¢", callback_data="music_callback hb3"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚Ä¢ùêÅùêã_ùêÇ ú·¥Ä·¥õ‚Ä¢", callback_data="music_callback hb4"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêÅùêã_ùêîs·¥á Ä‚Ä¢", callback_data="music_callback hb5"
                ),
                InlineKeyboardButton(text="C-P ü·¥Ä è", callback_data="music_callback hb6"),
            ],
            [
                InlineKeyboardButton(text="‚Ä¢ùêÜ_ùêÅ·¥Ä…¥‚Ä¢", callback_data="music_callback hb7"),
                InlineKeyboardButton(text="‚Ä¢ùêã·¥è·¥è·¥ò‚Ä¢", callback_data="music_callback hb8"),
                InlineKeyboardButton(
                    text="‚Ä¢ùêå·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á‚Ä¢", callback_data="music_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(text="‚Ä¢ùêè…™…¥…¢‚Ä¢", callback_data="music_callback hb10"),
                InlineKeyboardButton(text="‚Ä¢ùêè ü·¥Ä è‚Ä¢", callback_data="music_callback hb11"),
                InlineKeyboardButton(
                    text="‚Ä¢ùêí ú·¥ú“ì“ì ü·¥á‚Ä¢", callback_data="music_callback hb12"
                ),
            ],
            [
                InlineKeyboardButton(text="‚Ä¢ùêí·¥á·¥á·¥ã‚Ä¢", callback_data="music_callback hb13"),
                InlineKeyboardButton(text="‚Ä¢ùêí·¥è…¥…¢‚Ä¢", callback_data="music_callback hb14"),
                InlineKeyboardButton(text="‚Ä¢ùêí·¥ò·¥á·¥á·¥Ö‚Ä¢", callback_data="music_callback hb15"),
            ],
            [InlineKeyboardButton(text="‚Ä¢ùêÅ·¥Ä·¥Ñ·¥ã‚Ä¢", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"``**ùêÇ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.  I“ì  è·¥è·¥ú' Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Äs·¥ã …™…¥ [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](https://t.me/+3LYCl_fgUBgzZTQ9)**\n\n**ùêÄ ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: /**``",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("management"))
async def management_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text="‚Ä¢ùêÑx·¥õ Ä·¥ß‚Ä¢", callback_data="management_callback extra"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ä¢ùêÅ·¥ßŒ∑‚Ä¢", callback_data="management_callback hb1"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêä…™·¥Ñ·¥ãs‚Ä¢", callback_data="management_callback hb2"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêåœÖ·¥õ—î‚Ä¢", callback_data="management_callback hb3"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚Ä¢ùêè…™Œ∑‚Ä¢", callback_data="management_callback hb4"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêí·¥õ·¥ß“ì“ì‚Ä¢", callback_data="management_callback hb5"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêí—î·¥õ ùêî·¥ò‚Ä¢", callback_data="management_callback hb6"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚Ä¢ùêôœÉœª ô…™—î‚Ä¢", callback_data="management_callback hb7"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêÜ·¥ßœª—î‚Ä¢", callback_data="management_callback hb8"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêàœª·¥òœÉs·¥õ—î Ä‚Ä¢", callback_data="management_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚Ä¢ùêí·¥ßŒ∑…¢ œª·¥ß·¥õ·¥ß‚Ä¢", callback_data="management_callback hb10"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêì Ä·¥ßŒ∑s ü·¥ß·¥õ—î‚Ä¢", callback_data="management_callback hb11"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêì_ùêÜ Ä·¥ß·¥ò ú‚Ä¢", callback_data="management_callback hb12"
                ),
            ],
            [InlineKeyboardButton(text="ùêÅ·¥Ä·¥Ñ·¥ã ‚Ü™Ô∏è", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"``**ùêÇ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.  I“ì  è·¥è·¥ú' Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Äs·¥ã …™…¥ [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](https://t.me/+3LYCl_fgUBgzZTQ9)**\n\n**ùêÄ ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: /**``",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("tools"))
async def tools_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(text="‚Ä¢ùêÇ ú·¥ß·¥õ…¢·¥ò·¥õ‚Ä¢", callback_data="tools_callback ai")],
            [
                InlineKeyboardButton(text="‚Ä¢ùêÜœÉœÉ…¢ ü—î‚Ä¢", callback_data="tools_callback hb1"),
                InlineKeyboardButton(
                    text="‚Ä¢ùêì·¥õs_·¥†œÉ…™·¥Ñ—î‚Ä¢", callback_data="tools_callback hb2"
                ),
                InlineKeyboardButton(text="‚Ä¢ùêàŒ∑Íú∞œÉ‚Ä¢", callback_data="tools_callback hb3"),
            ],
            [
                InlineKeyboardButton(text="‚Ä¢ùêÖœÉŒ∑·¥õ‚Ä¢", callback_data="tools_callback hb4"),
                InlineKeyboardButton(text="‚Ä¢ùêå·¥ß·¥õ ú‚Ä¢", callback_data="tools_callback hb5"),
                InlineKeyboardButton(text="‚Ä¢ùêì·¥ß…¢·¥ß ü ü‚Ä¢", callback_data="tools_callback hb6"),
            ],
            [
                InlineKeyboardButton(text="‚Ä¢ùêàœª·¥ß…¢—î‚Ä¢", callback_data="tools_callback hb7"),
                InlineKeyboardButton(text="‚Ä¢ùêá·¥ßs·¥õ·¥ß…¢‚Ä¢", callback_data="tools_callback hb8"),
                InlineKeyboardButton(
                    text="‚Ä¢ùêí·¥õ…™·¥Ñ·¥ã—î Äs‚Ä¢", callback_data="tools_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(text="“ìœÖŒ∑", callback_data="tools_callback hb10"),
                InlineKeyboardButton(
                    text="‚Ä¢ùêêœÖœÉ·¥õ ü è‚Ä¢", callback_data="tools_callback hb11"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ùêì Ä_ùêÉ ú‚Ä¢", callback_data="tools_callback hb12"
                ),
            ],
            [InlineKeyboardButton(text="‚Ä¢ùêÅ·¥Ä·¥Ñ·¥ã‚Ä¢", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"``**ùêÇ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.  I“ì  è·¥è·¥ú' Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Äs·¥ã …™…¥ [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](https://t.me/+3LYCl_fgUBgzZTQ9)**\n\n**A ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: /**``",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("back_to_music"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="ùêì·¥Ä·¥ò  ú·¥á Ä·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥ç·¥á üíó",
                url=f"https://t.me/{app.username}?startgroup=true",
            ),
        ],
        [
            InlineKeyboardButton(text="Àπùêå·¥ús…™·¥Ñ üéß", callback_data="music"),
            InlineKeyboardButton(text="Àπùêå·¥ß…¥·¥ß…¢·¥ç·¥á…¥·¥õÀº üéÑ", callback_data="management"),
        ],
        [
            InlineKeyboardButton(text="Àπùêì·¥è·¥è üsÀº üîß", callback_data="tools"),
            InlineKeyboardButton(text="ÀπùêÄ ü üÀº üëÄ", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="ùêá·¥è·¥ç·¥á üîÑ", callback_data="go_to_start")],
    ]
    k = f"""**‚ú® ·¥ç·¥á·¥á·¥õ {app.mention} !\n\n‚ùÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚ùÖ‚ú¶‚ùÖ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÖ\nüé∂ …™‚Äô·¥ç ·¥Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ | ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ\n\nüöÄ …¥·¥è  ü·¥Ä…¢, …¥·¥è ·¥Ä·¥Ös, …¥·¥è ·¥ò Ä·¥è·¥ç·¥è·¥õ…™·¥è…¥s\nüéß ùü∏ùü∫/ùüΩ ·¥ú·¥ò·¥õ…™·¥ç·¥á ·¥°…™·¥õ ú ·¥õ ú·¥á  ô·¥ás·¥õ s·¥è·¥ú…¥·¥Ö «´·¥ú·¥Ä ü…™·¥õ è\nüí° ·¥õ·¥Ä·¥ò ·¥õ ú·¥á  ú·¥á ü·¥ò  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥áx·¥ò ü·¥è Ä·¥á ·¥ç è ·¥ç·¥è·¥Ö·¥ú ü·¥ás ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös!\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ùñ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ‚û• <a href=https://t.me/Chini_tomarre>ìÜ© ùêí ùêá ùêî ùêÅ ùêá ùêé ìÜ™</a></b></blockquote>**"""
    await callback_query.message.edit_text(
        text=k,
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


def back_to_music(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"music",
                ),
            ]
        ]
    )
    return upl


def back_to_tools(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"tools",
                ),
            ]
        ]
    )
    return upl


def back_to_management(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"management",
                ),
            ]
        ]
    )
    return upl


@app.on_callback_query(filters.regex("about"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text="ùêí ú·¥ú ô ú·¥è üíó", callback_data="developer"),
            InlineKeyboardButton(text="ùêÖ·¥á·¥Ä·¥õ·¥ú Ä·¥á ‚ú®", callback_data="feature"),
        ],
        [
            InlineKeyboardButton(text="‚Ä¢ùêÅ·¥Äs…™·¥Ñ ùêÜ·¥ú…™·¥Ö·¥á‚Ä¢", callback_data="basic_guide"),
            InlineKeyboardButton(text="‚Ä¢ùêÉ·¥è…¥·¥Ä·¥õ·¥á‚Ä¢", callback_data="donate"),
        ],
        [InlineKeyboardButton(text="‚Ä¢ùêÅ·¥Ä·¥Ñ·¥ã‚Ä¢", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"**ùêå·¥á·¥è·¥° …™ ·¥Ä·¥ç {app.mention} **\n\n**·¥Ä ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü ·¥Ä…¥·¥Ö ·¥Ä·¥°·¥ás·¥è·¥ç·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥Ä…¥·¥Ö ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä ·¥õ ú·¥Ä·¥õ …¢…™·¥†·¥ás  è·¥è·¥ú s·¥ò·¥Ä·¥ç-“ì Ä·¥á·¥á ·¥Ä…¥·¥Ö “ì·¥ú…¥ ·¥á…¥·¥†…™ Ä·¥è…¥·¥ç·¥á…¥·¥õ “ì·¥è Ä  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs :)**\n\n**‚óè …™ ·¥Ñ·¥Ä…¥  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥ús·¥á Äs.**\n**‚óè …™ ·¥Ñ·¥Ä…¥ …¢ Ä·¥á·¥á·¥õ ·¥ús·¥á Äs ·¥°…™·¥õ ú ·¥Ñ·¥ús·¥õ·¥è·¥ç…™·¥¢·¥Ä ô ü·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ s·¥á·¥õ ·¥Ä …¢ Ä·¥è·¥ú·¥ò's  Ä·¥ú ü·¥ás.**\n**‚óè …™  ú·¥Ä·¥†·¥á ·¥Ä ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä s ès·¥õ·¥á·¥ç.**\n**‚óè …™  ú·¥Ä·¥†·¥á ·¥Ä ü·¥ç·¥ès·¥õ ·¥Ä ü ü ·¥Ä·¥°·¥Ä…™·¥õ·¥á·¥Ö …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢…™…¥…¢ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás  ü…™·¥ã·¥á  ô·¥Ä…¥, ·¥ç·¥ú·¥õ·¥á, ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á, ·¥ã…™·¥Ñ·¥ã, “ì·¥á·¥Ö·¥á Ä·¥Ä·¥õ…™·¥è…¥, ·¥Ä…¥·¥Ö ·¥ç·¥Ä…¥ è ·¥ç·¥è Ä·¥á.**\n**‚óè …™  ú·¥Ä·¥†·¥á ·¥Ä …¥·¥è·¥õ·¥á-·¥ã·¥á·¥á·¥ò…™…¥…¢ s ès·¥õ·¥á·¥ç,  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õs, ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ ·¥ò Ä·¥á·¥Ö·¥á·¥õ·¥á Ä·¥ç…™…¥·¥á·¥Ö  Ä·¥á·¥ò ü…™·¥ás ·¥è…¥ ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ ·¥ã·¥á è·¥°·¥è Ä·¥Ös.**\n**‚óè …™ ·¥Ñ ú·¥á·¥Ñ·¥ã “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s' ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s  ô·¥á“ì·¥è Ä·¥á ·¥áx·¥á·¥Ñ·¥ú·¥õ…™…¥…¢ ·¥Ä…¥ è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ä…¥·¥Ö ·¥ç·¥è Ä·¥á s·¥õ·¥ú“ì“ì.**\n\n**‚ûª ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ ·¥ç·¥è Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ  ô·¥è·¥õ .**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


# If the back button has different meanings in various panels, you can set different callbacks
@app.on_callback_query(filters.regex("support"))
async def back_button_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(text="·¥è·¥°…¥·¥á Ä", user_id=config.OWNER_ID[0]),
            InlineKeyboardButton(
                text="ùêÄ ô·¥è·¥ú·¥õ üëÄ",
                url="https://t.me/about_shubho",
            ),
        ],
        [
            InlineKeyboardButton(text="ùêÇ ú·¥Ä·¥õ üíó", url=f"{config.SUPPORT_GROUP}"),
            InlineKeyboardButton(text="ùêí·¥è ú…™…¥…™ ‚ô•Ô∏è", url=f"{config.SUPPORT_CHANNEL}"),
        ],
        [InlineKeyboardButton(text="ùêá·¥è·¥ç·¥á üîÑ", callback_data="go_to_start")],
    ]

    await callback_query.message.edit_text(
        "**‡πè ùêÇ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ ·¥ç·¥è Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥ç·¥á**\n\n**…™“ì  è·¥è·¥ú “ì…™…¥·¥Ö ·¥Ä…¥ è ·¥á Ä Ä·¥è Ä ·¥è Ä  ô·¥ú…¢ ·¥è…¥  ô·¥è·¥õ ·¥è Ä ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢…™·¥†·¥á ·¥Ä…¥ è “ì·¥á·¥á·¥Ö ô·¥Ä·¥Ñ·¥ã ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥Ä Ä·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ  (‚úø‚ó†‚Äø‚ó†)**",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


@app.on_callback_query(filters.regex("donate"))
async def settings_back_callback(client: Client, callback_query: CallbackQuery):
    close = [[InlineKeyboardButton(text="‚úØ ·¥Ñ ü·¥ès·¥á ‚úØ", callback_data="close")]]
    await callback_query.message.reply_photo(
        photo="https://i.ibb.co/RcTvd4J/photo-2025-01-21-06-54-08-7462258510022049796.jpg",
        caption=f"**ùêí·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ç è ·¥Ñ·¥è·¥Ö…™…¥…¢ ·¥ä·¥è·¥ú Ä…¥·¥á è  ô è ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è ·¥õ·¥è  ú·¥á ü·¥ò ·¥á…¥ ú·¥Ä…¥·¥Ñ·¥á ·¥ç è  ô·¥è·¥õ's “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥ç·¥á…¥·¥õ.**\n\n** è·¥è·¥ú Ä ·¥Ñ·¥è…¥·¥õ Ä…™ ô·¥ú·¥õ…™·¥è…¥ ·¥°…™ ü ü ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è “ì·¥ú…¥·¥Ö ·¥õ ú·¥á ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥ ·¥è“ì …™…¥…¥·¥è·¥†·¥Ä·¥õ…™·¥†·¥á, ·¥ús·¥á Ä-“ì Ä…™·¥á…¥·¥Ö ü è ·¥õ·¥è·¥è üs ·¥Ä…¥·¥Ö ·¥áx·¥Ñ…™·¥õ…™…¥…¢  ô·¥è·¥õ ·¥Ñ·¥Ä·¥ò·¥Ä ô…™ ü…™·¥õ…™·¥ás.**\n\n**s…™·¥ç·¥ò ü è s·¥Ñ·¥Ä…¥ ·¥õ ú·¥á ·¥Ñ·¥è·¥Ö·¥á ·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥ã·¥á ·¥Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ‚Äî…¥·¥è  ú·¥Äss ü·¥á, ·¥ä·¥ús·¥õ ·¥Ä «´·¥ú…™·¥Ñ·¥ã ·¥°·¥Ä è ·¥õ·¥è s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ä…¥·¥Ö  ú·¥á ü·¥ò  ô Ä…™…¥…¢ …¥·¥á·¥° “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás ·¥õ·¥è  ü…™“ì·¥á.**\n\n**·¥á·¥†·¥á Ä è ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥,  ô…™…¢ ·¥è Ä s·¥ç·¥Ä ü ü, …¢·¥è·¥ás ·¥Ä  ü·¥è…¥…¢ ·¥°·¥Ä è …™…¥ ·¥ò·¥ús ú…™…¥…¢ ·¥õ ú…™s ·¥ò Ä·¥è·¥ä·¥á·¥Ñ·¥õ “ì·¥è Ä·¥°·¥Ä Ä·¥Ö. ·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú “ì·¥è Ä  ô·¥á…™…¥…¢ ·¥Ä ·¥ò·¥Ä Ä·¥õ ·¥è“ì ·¥õ ú…™s ·¥áx·¥Ñ…™·¥õ…™…¥…¢ ·¥ä·¥è·¥ú Ä…¥·¥á è!**",
        reply_markup=InlineKeyboardMarkup(close),
    )


@app.on_callback_query(filters.regex("basic_guide"))
async def settings_back_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [[InlineKeyboardButton(text="ùêÅ·¥Ä·¥Ñ·¥ã ‚Ü™Ô∏è", callback_data="about")]]
    guide_text = f"**ùêå·¥á·¥è·¥°! ·¥õ ú…™s …™s ·¥Ä «´·¥ú…™·¥Ñ·¥ã ·¥Ä…¥·¥Ö s…™·¥ç·¥ò ü·¥á …¢·¥ú…™·¥Ö·¥á ·¥õ·¥è ·¥ús…™…¥…¢** {app.mention} **üéâ**\n\n**1. ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á '·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ü·¥Ä…¥'  ô·¥ú·¥õ·¥õ·¥è…¥.**\n**2. s·¥á ü·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò …¥·¥Ä·¥ç·¥á.**\n**3. …¢ Ä·¥Ä…¥·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä ü ü …¥·¥á·¥Ñ·¥áss·¥Ä Ä è ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s “ì·¥è Ä s·¥ç·¥è·¥è·¥õ ú ·¥Ä…¥·¥Ö “ì·¥ú ü ü “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥·¥Ä ü…™·¥õ è.**\n\n**·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ ú·¥è·¥ès·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ ·¥ç·¥ús…™·¥Ñ ·¥è Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥ás.**\n**…™“ì  è·¥è·¥ú s·¥õ…™ ü ü “ì·¥Ä·¥Ñ·¥á ·¥Ä…¥ è …™ss·¥ú·¥ás, “ì·¥á·¥á ü “ì Ä·¥á·¥á ·¥õ·¥è  Ä·¥á·¥Ä·¥Ñ ú ·¥è·¥ú·¥õ “ì·¥è Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®**"
    await callback_query.message.edit_text(
        text=guide_text, reply_markup=InlineKeyboardMarkup(keyboard)
    )
